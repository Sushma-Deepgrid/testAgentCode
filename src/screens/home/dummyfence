import React, { useState, useEffect,useRef } from 'react';
import { Dimensions, Text, View, ActivityIndicator } from 'react-native';
import MapView, { Callout, Marker, Polygon } from 'react-native-maps';
import * as Location from 'expo-location';
import { COLORS, ROUTES, IMGS } from '../../constants';
const { width, height } = Dimensions.get('window');

const App = () => {
  const [location, setLocation] = useState(null);
  const [polygons, setPolygons] = useState([]);
const mapRef = useRef(null); 
   useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        // Handle permission denied
        return;
      }

      let { coords } = await Location.getCurrentPositionAsync({});
      setLocation(coords);
      if (mapRef.current) {
        // Animate the map to the user's location
        mapRef.current.animateToRegion({
          latitude: coords.latitude,
          longitude: coords.longitude,
          latitudeDelta: 0.0922 * 1.5,
          longitudeDelta: 0.0421 * 1.5,
        });
      }
    })();
  }, []);

  const toggle = (polygon) => {
    if (polygon.open) {
      polygon.marker.hideCallout();
    } else {
      polygon.marker.showCallout();
    }

    polygon.open = !polygon.open;

    // Close callout if marker is deleted
    if (!polygon.open) {
      deleteMarker(polygon);
    }
  };

  const handleMapPress = (event) => {
    const { coordinate } = event.nativeEvent;

    let updatedPolygons;

    if (polygons.length >= 3) {
      const lastPolygon = polygons[polygons.length - 1];
      const updatedCoordinates = [...lastPolygon.coordinates, coordinate];
      const updatedPolygon = { ...lastPolygon, coordinates: updatedCoordinates };
      updatedPolygons = [...polygons.slice(0, polygons.length - 1), updatedPolygon];
    } else {
      const newPolygon = {
        coordinates: [coordinate],
        open: false,
      };
      updatedPolygons = [...polygons, newPolygon];
    }

    setPolygons(updatedPolygons);
  };

  const deletePolygon = (polygon) => {
    const updatedPolygons = polygons.filter((item) => item !== polygon);
    setPolygons(updatedPolygons);
  };

  const deleteMarker = (polygon) => {
    const updatedPolygons = polygons.map((item) => {
      if (item === polygon) {
        return { ...item, open: false };
      }
      return item;
    });
    setPolygons(updatedPolygons);
  };

  const renderDeleteOption = (polygon) => {
    return (
      <Callout>
        <View>
          <Text onPress={() => deleteMarker(polygon)}>Delete</Text>
        </View>
      </Callout>
    );
  };

  if (location === null) {
   return (
      <View style={styles.loaderContainer}>
        <ActivityIndicator size="large" color={COLORS.primary} />
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <MapView
        style={styles.map}
         ref={mapRef}
        onPress={handleMapPress}
      >
       {location && (
          <Marker
            coordinate={{
              latitude: location.latitude,
              longitude: location.longitude,
            }}
          />
        )}
        {polygons.map((polygon, index) => (
          <View key={index}>
            <Polygon
              fillColor='rgba(0, 255, 0, 0.5)'
              coordinates={polygon.coordinates}
              onPress={() => toggle(polygon)}
            />
            <Marker ref={(ref) => (polygon.marker = ref)} coordinate={polygon.coordinates[0]}>
              {polygon.open && renderDeleteOption(polygon)}
              <Callout>
                <Text>Hello!</Text>
              </Callout>
            </Marker>
          </View>
        ))}

        {polygons.length >= 3 && (
          <Polygon
            fillColor='rgba(0, 255, 0, 0.2)'
            coordinates={polygons.flatMap((polygon) => polygon.coordinates)}
          />
        )}
      </MapView>
    </View>
  );
};

const styles = {
  container: {
    alignItems: 'stretch',
    flex: 1,
  },
  map: {
    flex: 1,
  },
    loaderContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
};

export default App;












import {StyleSheet, Text, View} from 'react-native';
import React from 'react';
import {COLORS} from '../../constants';

const Home = () => {
  return (
    <View
      style={{
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: COLORS.bgColor,
      }}>
      <Text>Home!</Text>
    </View>
  );
};

export default Home;

const styles = StyleSheet.create({});





<FlatList 
       data={notificationData}
        renderItem={renderItem}
       keyExtractor={(item, index) => index.toString()}
          numColumns={1}
      />





tasksDetails

import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, SafeAreaView, TouchableOpacity, View, Image, ScrollView, Button } from 'react-native';
import { COLORS, ROUTES, IMGS } from '../../constants';
import { PropertyId } from '../../../store';
import Ionicons from 'react-native-vector-icons/Ionicons';
import StepIndicator from 'react-native-step-indicator';
const TasksDetails = ({ navigation }) => {

  const { propertyId } = PropertyId.useState((s) => s);
  console.log(propertyId)
  const [propertyImage, setpropertyImage] = React.useState('')
  const [propertyID, setpropertyID] = React.useState('')
  const [propertySize, setpropertySize] = React.useState('')
  const [propertyDes, setpropertyDes] = React.useState('')
  const [propertyOwnerName, setpropertyOwnerName] = React.useState('')
  const [propertyAddress, setpropertyAddress] = React.useState('')


  const [propertiesData, setpropertiesData] = React.useState(
    [
      {
        'PropertyImage': IMGS.PROPRTY1,
        'PropertyId': 1,
        'Verified': 'yes',
        'OwnerImgae': 'profile',
        'OwnerName': 'Rajiv',
        'PropertyLocation': 'Hyderabad, Telangana',
        'PropertySize': ' 155 Acres ',
        'PropertyDescription': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed blandit metus nec libero tristique, ac commodo tortor molestie. Fusce interdum fringilla ante, id varius ipsum tristique ut. Nullam id mi sit amet purus scelerisque consequat vel vel ipsum. Vivamus ut semper est. Aliquam maximus eleifend nulla, id sollicitudin neque vehicula a. Morbi efficitur fermentum felis, in tincidunt nisi convallis aLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed blandit metus nec libero tristique',
        'PropertyAddress': 'Agiryala, Kondurg, Shadnager, Rangareddy, Telagana',
        'PropertyContact': '+919876543210',
        'Services': ['Watchman Service', 'EC', 'Cleaning Service']
      },
      {
        'PropertyImage': IMGS.PROPRTY1,
        'PropertyId': 2,
        'Verified': 'yes',
        'OwnerImgae': 'profile',
        'OwnerName': 'Shiva',
        'PropertyLocation': 'Hyderabad, Telangana',
        'PropertySize': '43 Acres',
        'PropertyDescription': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed blandit metus nec libero tristique, ac commodo tortor molestie. Fusce interdum fringilla ante, id varius ipsum tristique ut. Nullam id mi sit amet purus scelerisque consequat vel vel ipsum. Vivamus ut semper est. Aliquam maximus eleifend nulla, id sollicitudin neque vehicula a. Morbi efficitur fermentum felis, in tincidunt nisi convallis a',
        'PropertyAddress': 'Peddaipally, Balanagar, Mahabubnagar, Telangana',
        'PropertyContact': '+919876543210',
        'Services': ['Watchman Service', 'EC', 'Cleaning Service']
      },
      {
        'PropertyImage': IMGS.PROPRTY1,
        'PropertyId': 3,
        'Verified': 'yes',
        'OwnerImgae': 'profile',
        'OwnerName': 'Rajiv',
        'PropertyLocation': 'Hyderabad, Telangana',
        'PropertySize': '4000sq.ft',
        'PropertyDescription': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed blandit metus nec libero tristique, ac commodo tortor molestie. Fusce interdum fringilla ante, id varius ipsum tristique ut. Nullam id mi sit amet purus scelerisque consequat vel vel ipsum. Vivamus ut semper est. Aliquam maximus eleifend nulla, id sollicitudin neque vehicula a. Morbi efficitur fermentum felis, in tincidunt nisi convallis a',
        'PropertyAddress': 'Plot no 497, 100 Feet Rd, Ayyappa Society,Chanda Naik Nagar, Madhapur, Hyderabad Telangana 500081',
        'PropertyContact': '+919876543210',
        'Services': ['Watchman Service', 'EC', 'Cleaning Service']
      },
      {
        'PropertyImage': IMGS.PROPRTY1,
        'PropertyId': 4,
        'Verified': 'yes',
        'OwnerImgae': 'profile',
        'OwnerName': 'Rajiv',
        'PropertyLocation': 'Hyderabad, Telangana',
        'PropertySize': '4000sq.ft',
        'PropertyDescription': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed blandit metus nec libero tristique, ac commodo tortor molestie. Fusce interdum fringilla ante, id varius ipsum tristique ut. Nullam id mi sit amet purus scelerisque consequat vel vel ipsum. Vivamus ut semper est. Aliquam maximus eleifend nulla, id sollicitudin neque vehicula a. Morbi efficitur fermentum felis, in tincidunt nisi convallis a',
        'PropertyAddress': 'Plot no 497, 100 Feet Rd, Ayyappa Society,Chanda Naik Nagar, Madhapur, Hyderabad Telangana 500081',
        'PropertyContact': '+919876543210',
        'Services': ['Watchman Service', 'EC', 'Cleaning Service']
      },
      {
        'PropertyImage': IMGS.PROPRTY1,
        'PropertyId': 5,
        'Verified': 'false',
        'OwnerImgae': 'profile',
        'OwnerName': 'Rajiv',
        'PropertyLocation': 'Hyderabad, Telangana',
        'PropertySize': '4000sq.ft',
        'PropertyDescription': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed blandit metus nec libero tristique, ac commodo tortor molestie. Fusce interdum fringilla ante, id varius ipsum tristique ut. Nullam id mi sit amet purus scelerisque consequat vel vel ipsum. Vivamus ut semper est. Aliquam maximus eleifend nulla, id sollicitudin neque vehicula a. Morbi efficitur fermentum felis, in tincidunt nisi convallis a',
        'PropertyAddress': 'Plot no 497, 100 Feet Rd, Ayyappa Society,Chanda Naik Nagar, Madhapur, Hyderabad Telangana 500081',
        'PropertyContact': '+919876543210',
        'Services': ['Watchman Service', 'EC', 'Cleaning Service']
      },
      {
        'PropertyImage': IMGS.PROPRTY1,
        'PropertyId': 6,
        'Verified': 'yes',
        'OwnerImgae': 'profile',
        'OwnerName': 'Rajiv',
        'PropertyLocation': 'Hyderabad, Telangana',
        'PropertySize': '4000sq.ft',
        'PropertyDescription': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed blandit metus nec libero tristique, ac commodo tortor molestie. Fusce interdum fringilla ante, id varius ipsum tristique ut. Nullam id mi sit amet purus scelerisque consequat vel vel ipsum. Vivamus ut semper est. Aliquam maximus eleifend nulla, id sollicitudin neque vehicula a. Morbi efficitur fermentum felis, in tincidunt nisi convallis a',
        'PropertyAddress': 'Plot no 497, 100 Feet Rd, Ayyappa Society,Chanda Naik Nagar, Madhapur, Hyderabad Telangana 500081',
        'PropertyContact': '+919876543210',
        'Services': ['Watchman Service', 'EC', 'Cleaning Service']
      }
    ]);


  useEffect(() => {
    for (let i = 0; i < propertiesData.length; i++) {
      if (propertiesData[i].PropertyId === propertyId) {

        setpropertyImage(propertiesData[i].PropertyImage)
        setpropertyID(propertiesData[i].PropertyID)
        setpropertySize(propertiesData[i].PropertySize)
        setpropertyDes(propertiesData[i].PropertyDescription)
        setpropertyOwnerName(propertiesData[i].OwnerName)
        setpropertyAddress(propertiesData[i].PropertyAddress)
      }
    }

  }, [1])
  const [numberOfSteps, setNumberOfSteps] = useState(5);
  const [completedSteps, setCompletedSteps] = useState(0);

  // const stepsDetail = [
  //   { heading: "12 May", title: "You have taken test drive", description: "2010 White Alto LXI and 2 Others" },
  //   { heading: "14 May", title: "Pay Token", description: "for 2010 White Alto LXI" },
  //   { heading: "14 May", title: "Processing your loan", description: "Usually take 3-6 days for different banks" },
  //   { heading: "", title: "Take Car Delivery", description: "2010 White Alto LXI and 2 Others" },
  //   { heading: "", title: "Start Ownership Transfer Process", description: " Please bring the list of documents at the time of delivery" }
  // ];
  const stepsDetail = [
    { heading: "", title: "Property Visit", description: "" },
    { heading: "", title: "EC Service", description: "" },
    { heading: "", title: "Cleaning Service", description: "" },
    { heading: "", title: "Watchman Service", description: "" }
  ];


  const prev = () => {
    let step = completedSteps;
    if (step > 0) {
      step = step - 1;
      setCompletedSteps(step);
    }
  }

  const next = () => {
    let step = completedSteps;
    if (step < numberOfSteps) {
      step = step + 1;
      setCompletedSteps(step);
    }
  }

  const Steps = ({ stepsDetail, completedSteps }) => {
    return (
      <View style={styles.stepList}>
        {stepsDetail.map((step, index) => {
          let status = "";
          if (index < completedSteps) {
            status = "completed"
          }
          if (index > completedSteps) {
            status = "incomplete"
          }
          if (index === completedSteps) {
            status = "current"
          }
          return <Step key={index} status={status} heading={step.heading} title={step.title} description={step.description} />
        })}
      </View>
    );
  }

  const Step = ({ status, heading, title, description }) => {
    let style = styles.step;
    if (status === "current") {
      style = styles.currentStep;
    }
    if (status === "completed") {
      style = styles.completedStep;
    }
    if (status === "incomplete") {
      style = styles.incompleteStep;
    }

    return (
      <View style={style}>
        <Text style={styles.stepHeading}>{heading}</Text>
        <Text style={styles.stepTitle}>{title}</Text>
        <Text style={styles.stepDescription}>{description}</Text>
      </View>
    );
  }
  return (
    <ScrollView style={styles.maincontainer}>
      <View style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', marginBottom: 20 }}>
        <Ionicons name="ios-arrow-back" size={24} onPress={() => navigation.goBack()} />
        <Text style={{ fontSize: 24, display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'center', width: '100%', fontWeight: 'bold' }}>
          Property Details
        </Text>
      </View>
      <View>
        <Image style={styles.propertyImg}
          source={propertyImage}
        />
      </View>

      <View style={{ ...styles.flexStyle, paddingTop: 20 }}>
        <Text style={{ fontSize: 20, fontWeight: 'bold' }}>
          {propertyId}
        </Text>
        <Text style={{ fontSize: 18, fontWeight: 'bold' }}>
          {propertySize}
        </Text>
      </View>
      <ScrollView >
        <Text style={{ textAlign: 'justify', marginTop: 10 }}>
          {propertyDes}
        </Text>
      </ScrollView>
      <Text style={{ fontSize: 22, marginVertical: 10 }}>
        Contact Details
      </Text>
      <Text style={{ fontSize: 18 }}>
        {propertyOwnerName}
      </Text>
      <Text>
        {propertyAddress}
      </Text>

      <View style={styles.container}>
        <View style={styles.stepsCard}>
          <Steps stepsDetail={stepsDetail} completedSteps={completedSteps} />
        </View>
        <View style={styles.controlButtons}>
          <Button onPress={prev} title="Prev" />
          <Button onPress={next} title="Next" />
        </View>
      </View>

    </ScrollView>
  );
};

export default TasksDetails;

const styles = StyleSheet.create({
  maincontainer: {
    marginBottom: 75,
    paddingHorizontal: 20,
    backgroundColor: 'white',
  },
  flexStyle: {
    display: 'flex',
    justifyContent: 'space-between',
    flexDirection: 'row',
    alignItems: 'center',
    width: '100%'
  },
  propertyImg: {
    width: '100%',
    height: 100,
    borderRadius: 5,

  },
  container: {
    width: '100%',
    height: 'auto',
    padding: 20
  },
  stepsCard: {
    
    textAlign: 'center'
  },
  controlButtons: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginVertical: 10,
    paddingHorizontal: 20,
  },
  stepList: {
    marginBottom: 25,
  },
  step: {
    position: 'relative',
    marginBottom: 25,
    color: '#00b289',
  },
  incompleteStep: {
    position: 'relative',
    marginBottom: 25,
    color: '#00b289',
  },
  currentStep: {
    position: 'relative',
    marginBottom: 25,
    color: '#00b289'
  },
  completedStep: {
    position: 'relative',
    marginBottom: 25,
    color: '#a3aec2',
    backgroundColor: '#00b289'
  },
  stepHeading: {
    fontSize: 14,
    color: '#444a59',
    marginBottom: 5,
    fontWeight: '100',
  },
  stepTitle: {
    fontSize: 16,
    fontWeight: '700',
    marginBottom: 4,
    textAlign: 'center'
  },
  stepDescription: {
    fontSize: 16,
    color: '#444a59',
  },
});







































































import React, { useState, useRef,useEffect } from 'react';
import { Dimensions, Text, View,ActivityIndicator } from 'react-native';
import MapView, { Callout, Marker, Polygon } from 'react-native-maps';
import * as Location from 'expo-location';
import { COLORS, ROUTES, IMGS } from '../../constants';
const { width, height } = Dimensions.get('window');

const GeoFencing = () => {
   const [location, setLocation] = useState(null);
const mapRef = useRef(null); 
   useEffect(() => {
    
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
       console.log(status)
      if (status !== 'granted') {
        // Handle permission denied
        return;
      }
     else{
       
      let { coords } = await Location.getCurrentPositionAsync({});
      setLocation(coords);
      console.log(coords)
      if (mapRef.current) {
        // Animate the map to the user's location
        mapRef.current.animateToRegion({
          latitude: coords.latitude,
          longitude: coords.longitude,
          latitudeDelta: 0.0922 * 1.5,
          longitudeDelta: 0.0421 * 1.5,
        });
      }
     }
    })();
  }, []);
  const [region, setRegion] = useState({
    latitude: 24.889831,
    longitude: 67.0672087,
    latitudeDelta: 0.5,
    longitudeDelta: 0.5 * (width / height),
  });

  const [polygons, setPolygons] = useState([]);

  const toggle = (polygon) => {
    if (polygon.open) {
      polygon.marker.hideCallout();
    } else {
      polygon.marker.showCallout();
    }

    polygon.open = !polygon.open;

    // Close callout if marker is deleted
    if (!polygon.open) {
      deleteMarker(polygon);
    }
  };

  const handleMapPress = (event) => {
    const { coordinate } = event.nativeEvent;

    let updatedPolygons;

    if (polygons.length >= 3) {
      const lastPolygon = polygons[polygons.length - 1];
      const updatedCoordinates = [...lastPolygon.coordinates, coordinate];
      const updatedPolygon = { ...lastPolygon, coordinates: updatedCoordinates };
      updatedPolygons = [...polygons.slice(0, polygons.length - 1), updatedPolygon];
    } else {
      const newPolygon = {
        coordinates: [coordinate],
        open: false,
      };
      updatedPolygons = [...polygons, newPolygon];
    }

    setPolygons(updatedPolygons);
  };

  const deletePolygon = (polygon) => {
    const updatedPolygons = polygons.filter((item) => item !== polygon);
    setPolygons(updatedPolygons);
  };

  const deleteMarker = (polygon) => {
    const updatedPolygons = polygons.map((item) => {
      if (item === polygon) {
        return { ...item, open: false };
      }
      return item;
    });
    setPolygons(updatedPolygons);
  };

  const renderDeleteOption = (polygon) => {
    return (
      <Callout>
        <View>
          <Text onPress={() => deleteMarker(polygon)}>Delete</Text>
        </View>
      </Callout>
    );
  };


  return (
    <>
{
  location === null ?
 <View style={styles.loaderContainer}>
        <ActivityIndicator size="large" color={COLORS.primary} />
      </View>

      :
<View style={styles.container}>
      <MapView style={styles.map}  ref={mapRef} onPress={handleMapPress}>
       <Marker
            coordinate={{
              latitude: location.latitude,
              longitude: location.longitude,
            }}
          />
        {polygons.map((polygon, index) => (
          <View key={index}>
            <Polygon
              fillColor='rgba(255, 0, 0, 0.5)'
              coordinates={polygon.coordinates}
              onPress={() => toggle(polygon)}
            />
            <Marker ref={(ref) => (polygon.marker = ref)} coordinate={polygon.coordinates[0]}>
              {polygon.open && renderDeleteOption(polygon)}
              <Callout>
                <Text>Hello!</Text>
              </Callout>
            </Marker>
          </View>
        ))}

        {polygons.length >= 3 && (
          <Polygon
            fillColor='rgba(255, 0, 0, 0.5)'
            coordinates={polygons.flatMap((polygon) => polygon.coordinates)}
          />
        )}
      </MapView>
    </View>

}
    </>
    
  );
};

const styles = {
  container: {
    alignItems: 'stretch',
    flex: 1,
  },
  map: {
    flex: 1,
  },
    loaderContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
};

export default GeoFencing;






GEOFENCINGGGGGGGGGGGGGGGGGGG

import React, { useState, useRef,useEffect } from 'react';
import { Dimensions, Text, View,ActivityIndicator,TextInput,TouchableOpacity } from 'react-native';
import MapView, { Callout, Marker, Polygon } from 'react-native-maps';
import * as Location from 'expo-location';
import { COLORS, ROUTES, IMGS } from '../../constants';
import Ionicons from 'react-native-vector-icons/Ionicons';
import {Geofencing} from '../../../store';
import axios from 'axios';
import { PropertyId,ServiceName,ServiceId,UserToken,DataTable} from '../../../store';
const { width, height } = Dimensions.get('window');

const GeoFencing = ({navigation}) => {
  const { serviceId } = ServiceId.useState((s) => s);
  console.warn(serviceId)
   const { userToken } = UserToken.useState((s) => s);
   const [location, setLocation] = useState(null);
    const [searchValue, setSearchValue] = useState('');
  const [searchResult, setSearchResult] = useState(null);
  const[locateme,setLocateMe]=useState(false);
  const[coordinatesList,setcoordinatesList]=useState([]);
const mapRef = useRef(null); 
   useEffect(() => {
    
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
       console.log(status)
      if (status !== 'granted') {
        // Handle permission denied
        return;
      }
     else{
       
      let { coords } = await Location.getCurrentPositionAsync({});
      setLocation(coords);
      console.log(coords)
      
     }
    })();
  }, []);

   const handleLocate = async () => { 
     setLocateMe(true)
if (mapRef.current) {
        // Animate the map to the user's location
        mapRef.current.animateToRegion({
          latitude: coords.latitude,
          longitude: coords.longitude,
          latitudeDelta: 0.0922 * 1.5,
          longitudeDelta: 0.0421 * 1.5,
        });
      }
   }
  const [region, setRegion] = useState({
    latitude: 24.889831,
    longitude: 67.0672087,
    latitudeDelta: 0.5,
    longitudeDelta: 0.5 * (width / height),
  });

  const [polygons, setPolygons] = useState([]);

  const toggle = (polygon) => {
    if (polygon.open) {
      polygon.marker.hideCallout();
    } else {
      polygon.marker.showCallout();
    }

    polygon.open = !polygon.open;

    // Close callout if marker is deleted
    if (!polygon.open) {
      deleteMarker(polygon);
    }
  };

  const handleMapPress = (event) => {
    const { coordinate } = event.nativeEvent;

    let updatedPolygons;
const cooObj=[...coordinatesList]
    if (polygons.length >= 4) {
      const lastPolygon = polygons[polygons.length - 1];
      const updatedCoordinates = [...lastPolygon.coordinates, coordinate];
      const updatedPolygon = { ...lastPolygon, coordinates: updatedCoordinates };
      updatedPolygons = [...polygons.slice(0, polygons.length - 1), updatedPolygon];
    } else {
      const newPolygon = {
        coordinates: [coordinate],
        open: false,
      };
      cooObj.push(newPolygon.coordinates[0])
      console.log(cooObj)
      setcoordinatesList(cooObj)
      updatedPolygons = [...polygons, newPolygon];
    }

    setPolygons(updatedPolygons);
  };

  const deletePolygon = (polygon) => {
    const updatedPolygons = polygons.filter((item) => item !== polygon);
    setPolygons(updatedPolygons);
  };

  const deleteMarker = (polygon) => {
    const updatedPolygons = polygons.map((item) => {
      if (item === polygon) {
        return { ...item, open: false };
      }
      return item;
    });
    setPolygons(updatedPolygons);
  };

  const renderDeleteOption = (polygon) => {
    return (
      <Callout>
        <View>
          <Text onPress={() => deleteMarker(polygon)}>Delete</Text>
        </View>
      </Callout>
    );
  };

  const handleSearch = async () => {
    if (!searchValue) return;

    try {
      const geocode = await Location.geocodeAsync(searchValue);
      if (geocode.length > 0) {
        const firstResult = geocode[0];
        const { latitude, longitude } = firstResult;
        setSearchResult({ latitude, longitude });
        if (mapRef.current) {
          mapRef.current.animateToRegion({
            latitude,
            longitude,
            latitudeDelta: 0.0922 * 1.5,
            longitudeDelta: 0.0421 * 1.5,
          });
        }
      } else {
        // Handle no results found
      }
    } catch (error) {
      // Handle error
    }
  };


  async function handleSaveFencing(){
  console.log(coordinatesList)
  const formData = new FormData();
  formData.append("status", "Completed");
  formData.append("geo_fencing", JSON.stringify(coordinatesList));
  formData.append("geo_tagging", []);



    formData.append("images",[]);
  



    formData.append("documents",[]);
  

  try {
    const response = await axios.put(
      `https://aagama2.adgrid.in/user/edit-task/${serviceId}`,
      formData,
      {
        headers: {
          'Authorization': 'Bearer ' + userToken,
          'Content-Type': 'multipart/form-data',
        },
      }
    );

    console.log(response);
    navigation.navigate(ROUTES.TASKS_DETAIL);
  } catch (error) {
    console.log(error);
  }
  if(coordinatesList.length != 0){
     Geofencing.update((s) => {
        s.geofencing = coordinatesList;
      })
   navigation.navigate(ROUTES.PROPERTYVISIT)
  }
  else{
    alert("Please do the fencing")
  }
}
  return (
    <>
{
  location === null ?
  <>
  <View style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', marginBottom: 20, marginTop: 10 }}>
        <Ionicons name="ios-arrow-back" size={24} onPress={() => navigation.goBack()} />
        <Text style={{ fontSize: 24, display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'center', width: '100%', fontWeight: 'bold', marginLeft: 10 }}>
          GeoFencing
        </Text>
      </View>
 <View style={styles.loaderContainer}>
 
        <ActivityIndicator size="large" color={COLORS.primary} />
      </View>
      </>

      :
<View style={styles.container}>
<View style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', marginBottom: 20, marginTop: 10, justifyContent:'space-between',paddingHorizontal:10 }}>

<View >
       
        <Text style={{ fontSize: 24, display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'center', width: '100%', fontWeight: 'bold', marginLeft: 10 }}>
        <Ionicons name="ios-arrow-back" size={24} onPress={() => navigation.goBack()} />   GeoFencing
        </Text>
        </View>
        <View >
           <TouchableOpacity  onPress={handleSaveFencing} style={{backgroundColor:COLORS.primary,borderRadius:10,padding:10}}>
             <Text style={{color:'white'}}>
               Save
             </Text>
            </TouchableOpacity>
        </View>
      </View>
       
       <View style={styles.searchContainer}>
            <TextInput
              style={styles.searchInput}
              placeholder="Enter location or latitude,longitude values"
              value={searchValue}
              onChangeText={setSearchValue}
               placeholderTextColor={COLORS.primary}
            />
            <TouchableOpacity  onPress={handleSearch}>
              <Ionicons name="search" size={24} color={COLORS.primary} />
            </TouchableOpacity>

            <TouchableOpacity  onPress={handleLocate}>
              <Ionicons name="locate-sharp" size={28} color={COLORS.primary} />
            </TouchableOpacity>
          </View>
      <MapView style={styles.map}  ref={mapRef} onPress={handleMapPress}>
      {
        locateme &&
       <Marker
            coordinate={{
              latitude: location.latitude,
              longitude: location.longitude,
            }}
          />
      }
          {searchResult && (
              <Marker
                coordinate={{
                  latitude: searchResult.latitude,
                  longitude: searchResult.longitude,
                }}
              />
            )}
        {polygons.map((polygon, index) => (
          <View key={index}>
            <Polygon
              fillColor='rgba(255, 0, 0, 0.5)'
              coordinates={polygon.coordinates}
              onPress={() => toggle(polygon)}
            />
            <Marker ref={(ref) => (polygon.marker = ref)} coordinate={polygon.coordinates[0]}>
              {polygon.open && renderDeleteOption(polygon)}
              <Callout>
                <Text>Hello!</Text>
              </Callout>
            </Marker>
          </View>
        ))}

        {polygons.length >= 3 && (
          <Polygon
            fillColor='rgba(255, 0, 0, 0.5)'
            coordinates={polygons.flatMap((polygon) => polygon.coordinates)}
          />
        )}
      </MapView>
    </View>

}
    </>
    
  );
};

const styles = {
  container: {
    alignItems: 'stretch',
    flex: 1,
  },
  map: {
    flex: 1,
  },
    loaderContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 10,
    marginBottom: 10,
  },
  searchInput: {
    flex: 1,
    height: 40,
    borderRadius: 5,
    borderWidth: 1,
    borderColor: '#ccc',
    paddingHorizontal: 10,
    marginRight: 10,
    color:COLORS.primary
  },
  searchButton: {
    backgroundColor: '#2196F3',
    borderRadius: 5,
    paddingHorizontal: 10,
    paddingVertical: 8,
  },
  searchButtonText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 16,
  },
};

export default GeoFencing;